import 'package:flutterwasmaapp/Model/owner_model.dart';

class RepositoryModel {
  bool hasIssues,
      hasProjects,
      privateX,
      hasDownloads,
      hasWiki,
      hasPages,
      archived,
      disabled,
      fork;

  String nodeId,
      name,
      fullName,
      htmlUrl,
      description,
      url,
      forksUrl,
      keysUrl,
      collaboratorsUrl,
      teamsUrl,
      hooksUrl,
      issueEventsUrl,
      eventsUrl,
      assigneesUrl,
      branchesUrl,
      tagsUrl,
      blobsUrl,
      gitTagsUrl,
      gitRefsUrl,
      treesUrl,
      statusesUrl,
      languagesUrl,
      stargazersUrl,
      contributorsUrl,
      subscribersUrl,
      subscriptionUrl,
      commitsUrl,
      gitCommitsUrl,
      commentsUrl,
      issueCommentUrl,
      contentsUrl,
      compareUrl,
      mergesUrl,
      archiveUrl,
      downloadsUrl,
      issuesUrl,
      pullsUrl,
      milestonesUrl,
      notificationsUrl,
      labelsUrl,
      releasesUrl,
      deploymentsUrl,
      createdAt,
      updatedAt,
      pushedAt,
      gitUrl,
      sshUrl,
      cloneUrl,
      svnUrl,
      homepage,
      language,
      defaultBranch,
      license,
      mirrorUrl;

  int id,
      openIssuesCount,
      forksCount,
      forks,
      size,
      stargazersCount,
      watchersCount,
      openIssues,
      watchers;
  OwnerModel ownerModel;

  RepositoryModel({this.id,
    this.archived,
    this.description,
    this.url,
    this.archiveUrl,
    this.assigneesUrl,
    this.blobsUrl,
    this.branchesUrl,
    this.cloneUrl,
    this.collaboratorsUrl,
    this.commentsUrl,
    this.commitsUrl,
    this.compareUrl,
    this.contentsUrl,
    this.contributorsUrl,
    this.createdAt,
    this.defaultBranch,
    this.deploymentsUrl,
    this.disabled,
    this.downloadsUrl,
    this.tagsUrl,
    this.eventsUrl,
    this.fork,
    this.forks,
    this.forksCount,
    this.forksUrl,
    this.fullName,
    this.gitCommitsUrl,
    this.gitRefsUrl,
    this.gitTagsUrl,
    this.gitUrl,
    this.hasDownloads,
    this.hasIssues,
    this.hasPages,
    this.hasProjects,
    this.hasWiki,
    this.homepage,
    this.hooksUrl,
    this.teamsUrl,
    this.htmlUrl,
    this.issueCommentUrl,
    this.issueEventsUrl,
    this.issuesUrl,
    this.keysUrl,
    this.labelsUrl,
    this.language,
    this.languagesUrl,
    this.license,
    this.mergesUrl,
    this.milestonesUrl,
    this.mirrorUrl,
    this.name,
    this.nodeId,
    this.notificationsUrl,
    this.openIssues,
    this.openIssuesCount,
    this.privateX,
    this.pullsUrl,
    this.pushedAt,
    this.releasesUrl,
    this.size,
    this.sshUrl,
    this.stargazersCount,
    this.stargazersUrl,
    this.statusesUrl,
    this.subscribersUrl,
    this.subscriptionUrl,
    this.svnUrl,
    this.treesUrl,
    this.updatedAt,
    this.watchers,
    this.watchersCount,
    this.ownerModel});

  factory RepositoryModel.fromJson(Map<String, dynamic> json) {
    return RepositoryModel(
      id: json['id'] as int,
      archived: json['archived'] as bool,
      description: json['description'] as String,
      url: json['url'] as String,
      nodeId: json['node_id'] as String,
      fork: json['fork'] as bool,
      archiveUrl: json['archive_url'] as String,
      assigneesUrl: json['assignees_url'] as String,
      blobsUrl: json['blobs_url'] as String,
      branchesUrl: json['branches_url'] as String,
      cloneUrl: json['clone_url'] as String,
      collaboratorsUrl: json['collaborators_url'] as String,
      watchersCount: json['watchers_count'] as int,
      privateX: json['privateX'] as bool,
      commentsUrl: json['comments_url'] as String,
      commitsUrl: json['commits_url'] as String,
      forks: json['forks'] as int,
      compareUrl: json['compare_url'] as String,
      contentsUrl: json['contents_url'] as String,
      contributorsUrl: json['contributors_url'] as String,
      createdAt: json['created_at'] as String,
      defaultBranch: json['default_branch'] as String,
      deploymentsUrl: json['deployments_url'] as String,
      disabled: json['disabled'] as bool,
      forksCount: json['forks_count'] as int,
      downloadsUrl: json['downloads_url'] as String,
      gitRefsUrl: json['git_refs_url'] as String,
      eventsUrl: json['events_url'] as String,
      watchers: json['watchers'] as int,
      forksUrl: json['forks_url'] as String,
      fullName: json['full_name'] as String,
      updatedAt: json['updated_at'] as String,
      size: json['size'] as int,
      hasDownloads: json['has_downloads'] as bool,
      stargazersUrl: json['stargazers_url'] as String,
      gitCommitsUrl: json['git_commits_url'] as String,
      stargazersCount: json['stargazers_count'] as int,
      gitTagsUrl: json['git_tags_url'] as String,
      gitUrl: json['git_url'] as String,
      hasPages: json['has_pages'] as bool,
      treesUrl: json['trees_url'] as String,
      homepage: json['home_page'] as String,
      hasIssues: json['has_issues'] as bool,
      hasProjects: json['has_projects'] as bool,
      hasWiki: json['has_wiki'] as bool,
      hooksUrl: json['hooks_url'] as String,
      htmlUrl: json['html_url'] as String,
      issueCommentUrl: json['issue_comment_url'] as String,
      issueEventsUrl: json['issue_events_url'] as String,
      issuesUrl: json['issues_url'] as String,
      openIssues: json['open_issues'] as int,
      openIssuesCount: json['open_issues_count'] as int,
      keysUrl: json['keys_url'] as String,
      labelsUrl: json['labels_url'] as String,
      language: json['language'] as String,
      languagesUrl: json['languages_url'] as String,
      license: json['license'] as String,
      mergesUrl: json['merges_url'] as String,
      milestonesUrl: json['milestones_url'] as String,
      mirrorUrl: json['mirror_url'] as String,
      name: json['name'] as String,
      notificationsUrl: json['notifications_url'] as String,
      pullsUrl: json['pulls_url'] as String,
      pushedAt: json['pushed_at'] as String,
      releasesUrl: json['releases_url'] as String,
      sshUrl: json['ssh_url'] as String,
      statusesUrl: json['statuses_url'] as String,
      subscribersUrl: json['subscribers_url'] as String,
      subscriptionUrl: json['subscription_url'] as String,
      svnUrl: json['svn_url'] as String,
      tagsUrl: json['tags_url'] as String,
      teamsUrl: json['teams_url'] as String,
      ownerModel: OwnerModel.fromJson(json["owner"]),
    );
  }
}

class ExampleRepositoryModel {
  String nodeId,
      name,
      fullName,
      htmlUrl;

  ExampleRepositoryModel({this.htmlUrl, this.nodeId, this.name, this.fullName});

  factory ExampleRepositoryModel.fromJson(Map<String, dynamic> json) {
    return ExampleRepositoryModel(
      htmlUrl: json['html_url'] as String,
      nodeId: json['node_id'] as String,
      fullName: json['full_name'] as String,
      name:  json['name'] as String,);
  }

}